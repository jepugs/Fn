(namespace fn.example/lazy)

(def Lazy-List
     (set-metatable
      {'__call
       ; constructor
       (fn (self value-fun)
         (let res {})
         (set! (. res 'force)
               (fn ()
                 ; evaluate the value function
                 (let v (value-fun))
                 ; replace the force method
                 (set! (. res 'force) (fn () v))
                 v))
         (set-metatable Lazy-List res))}
      {'head (fn (self)
               (head ((. self 'force))))
       'tail (fn (self)
               (head (tail ((. self 'force)))))
       'empty? (fn (self)
                 (= ((. self 'force)) nil))}))

(defn list->lazy (list)
  (if (empty? list)
      (Lazy-List (fn () nil))
      (Lazy-List (fn () (List (head list)
                              (list->lazy (tail list)))))))

(defn lhead (lazy)
  (head ((. lazy 'force))))

(defn ltail (lazy)
  (head (tail ((. lazy 'force)))))

(defn lempty? (lazy)
  (= ((. lazy 'force)) nil))

(defn lazy->list (lazy)
  (letfn iter (acc rem)
    (if (lempty? rem)
        (reverse acc)
        (iter (cons (lhead rem) acc)
              (ltail rem))))
  (iter (List) lazy))

(defn lcons (hd lazy)
  (Lazy-List (fn ()
               (List hd lazy))))

(defn lconcat (l1 l2)
  (if (lempty? l1)
      l2
      (Lazy-List
       (fn () (List (lhead l1)
                    (lconcat (ltail l1) l2))))))

(defn ltake (n lazy)
  (letfn iter (acc m rem)
    (if (or (lempty? rem) (<= m 0))
        (reverse acc)
        (iter (cons (lhead rem) acc)
              (- m 1)
              (ltail rem))))
  (iter (List) n lazy))


(defn lmap (fun lazy)
  (if (lempty? lazy)
      (list->lazy (List))
    (Lazy-List
     $(List (fun (lhead lazy))
            (lmap fun (ltail lazy))))))

(defn unbox-lazy (lazy)
  (List (lhead lazy) (ltail lazy)))

(defn lfilter (pred lazy)
  (letfn next (rem)
         (cond
           (lempty? rem) rem
           (pred (lhead rem))
           (lcons (lhead rem)
                  (Lazy-List (fn () (unbox-lazy (next (ltail rem))))))
           otherwise (next (ltail rem))))
  (next lazy))

(def N>=0
  (do 
    (let next-int
         (fn (x) (Lazy-List
                  (fn () (List x (next-int (+ x 1)))))))
    (next-int 0)))

; (list->lazy (List 1 2 3 4))

(do
  (let init-primes (list->lazy (List 2 3 5 7))
       next-pair
       (fn (x)
         (Lazy-List
          (fn () (List (- (* 6 x) 1)
                       (lcons (+ (* 6 x) 1)
                              (next-pair (+ x 1)))))))
       candidates (next-pair 2))
  (letfn prime-test? (x)
    (let max (ceil (** x 0.5)))
    (letfn iter (rem)
      (let n (lhead rem))
      (cond
        (= (mod x n) 0)  no
        (>= n max)       yes
        otherwise        (iter (ltail rem))))
    (iter primes))
  (def primes
    (lconcat init-primes
             (Lazy-List (fn ()
                          (let next (lfilter prime-test? candidates))
                          (List (lhead next) (ltail next)))))))

(defn lnth (n l)
  (if (<= n 0)
      (lhead l)
      (lnth (- n 1) (ltail l))))

; (ltake 13 primes)
(lnth 99999 primes)
; (lnth 999 N>=0)
