#+TITLE: Fn Programming Language Manual (pre-0.1)
#+AUTHOR: Jack Pugmire

* Introduction

This is the official manual for Fn. It is not a /guide/ in the sense that it does
not attempt to teach Fn in a linear fashion. However, there should be enough
here for any experienced programmer to get started.

Section [[Language Reference]] contains a description of all the major features of
the Fn language.

Section [[Command Line Interface]] gives instructions on using the ~fn~ command line
tool to evaluate code.

Section [[Builtin Functions]] contains a list of builtin functions. This section is
mostly unwritten.

Upcoming section [[FFI]] details how to interface with C code from Fn.


* Language Reference

Fn is a dynamically typed, garbage-collected, general-purpose programming
language with Lisp-like syntax. A couple of its defining characteristics are:
- The core language has relatively few operators, with special care taken to
  ensure they have consistent and concise syntax.
- Fn is designed for a "mostly functional" programming style, where immutability
  and referential transparency are favored, but not required.
- The native macro system allows definition of new syntax (and even entire
  domain-specific languages) using regular Fn code and data structures.

The syntax looks like this:

#+BEGIN_SRC fn
(def sqrt-precision 0.001)
(def approx-sqrt (x)
  (letfn iterate (guess)
    (if (< (abs (- x (* guess guess)) sqrt-precision))
        guess
        (iterate (/ (+ guess (/ x guess) 2)))))
  (if (>= x 0)
      (iterate (/ x 2))
      (error "Cannot approximate square root of a negative number.")))
#+END_SRC


** Variables and Mutation

*** Local Variables

Local variables can be created using one of the special operators ~let~, ~letfn~, or
~with~.[fn:let-other-lisp] They all bind variables in the same way, but with
different syntax for programmer convenience. Function parameters are also
treated as local variables within the function body.

Before proceeding, we note that the full story about local variables involves
variable capture semantics, which are covered in a later section. Variable
capture doesn't affect any of the concepts discussed in the rest of this section.

~let~ is the most elementary way to create a local variable. It defines one or
more new variables in the current lexical environment.

#+BEGIN_SRC fn
;; let binds variables to the given values
(let x 'symbol)
;; multiple definitions can be made in a single let
(let a 16
     b (reverse "string")
     ;; value expressions can refer to variables from earlier in the same let
     c (+ a (length b))
#+END_SRC

~with~ is similar to ~let~, but rather than creating definitions in the containing
environment, it creates a new lexical environment.

#+BEGIN_SRC fn
;; this creates two variables
(with (a 3
       b 4)
  ;; the body can contain multiple expressions
  (println "hello")
  (+ a b))
;; returns 7
;; the variables a, b do not exist outside of the with body
#+END_SRC

~letfn~ has a streamlined syntax for creating functions, but otherwise behaves
like ~let~. See the documentation below for details.

All local variables can have their value changed with ~set!~. The exclamation
point is because mutation is not to be taken lightly. The syntax for ~set!~ is
like this:

#+BEGIN_SRC fn
(set! var-name new-value)
;; for example
(let var 'hi)
(println var) ;; prints 'hi
(set! var 'lo)
(println var) ;; prints 'lo
#+END_SRC

Note that attempting to ~set!~ a global variable will result in an error.

[fn:let-other-lisp] In Fn, the ~with~ operator provides the functionality of what
most Lisp-like languages call ~let~, while Fn's ~let~ is quite different, as it acts
on the surrounding environment.


*** Global Variables

Global variables in Fn are created using ~def~ or ~defn~. E.g.

#+BEGIN_SRC fn
(def my-global 'special-constant)
(def my-other-global (+ 21 69))
#+END_SRC

~defn~ behaves exactly like ~def~, but has special syntax streamlined for defining
functions.

Global variables are immutable, i.e. they cannot be changed by using ~set!~.
However, by assigning global variables to mutable datatypes or by exploiting
variable capture (discussed in a later section), mutable state can still be
associated to a global variable. This is intended behavior, however, it is not
recommended that you abuse it.


** Data Types

Fn provides the following builtin data types (type names in Fn are
~Capitalized-Like-This~):

- ~Nil~ :: The special constant ~nil~, used to indicate no value.
- ~Bool~ :: The special boolean constants ~true~ and ~false~.
- ~Num~ :: Floating-point numbers. (These are almost IEEE 64-bit floats, but we
  truncate the significand by four bits to fit type information).
- ~Symbol~ :: Internalized strings. These are essentially strings with a faster
  equality test, at the expensive of slower access to the characters of the
  string. They are used extensively by the macro system.
- ~String~ :: (Immutable) sequences of bytes. Usually these are UTF-8 encoded
  character streams.
- ~List~ :: (Immutable) singley-linked lists.
- ~Table~ :: Mutable key-value stores.

Of these, only lists and tables logically contain other values. (Substrings can
be extracted from strings, but this actually creates a new string object and
just copies in data from the other string). So, we call ~List~ and ~Table~ the two
*compound data types*, and call the rest of them *simple data types*.

*** Simple Data Types
Here is what the syntax looks like for the simple data types:

#+BEGIN_SRC fn
;; numbers are pretty much what you'd expect
2
-6
3.14159
2.0e-6 ;; we have scientific notation
0xFf ;; hexadecimal, even!

;; strings are enclosed within matched double quotes
"string"
"Fn uses escape codes from C, e.g. \\ \"\n"
""

;; symbols are prefixed by a single quote.
'sym1
'sym2
;; symbols can contain whitespace and syntax characters, provided they are 
;; escaped with a backslash
'sym\ with\ \"escapes\"
;; be careful about the quote operator. If the quoted expression is a number,
;; it will result in a number instead of a symbol. You can get around this 
;; with escapes:
'0xb8  ;; this is a number
'\0xb8 ;; this is a symbol

;; booleans and nil are called by name
true
false
nil
#+END_SRC

See also subsection [[Quoting]] for more on symbols and the quote operator.


*** Lists

Lists in Fn are what you'd expect for a functional programming language. They're
created using square brackets or by using the ~List~ function.

#+BEGIN_SRC fn
[] ; empty list
['a 'b] ; list of two symbols
[1 'a "str"] ; lists may contain objects of arbitrary type

;; List is identical to square bracket syntax
[1 2 3]
(List 1 2 3)
#+END_SRC

Lists can be manipulated with builtin functions:

#+BEGIN_SRC fn
(def list1 [["str" 2] 'a 'b])
(def list2 [0 2 4 6 8 10])

;; head and tail access the head and tail of the list
(head list1) ;=> ["str" 2]
(head list2) ;=> 0
(tail list1) ;=> ['a 'b]

(tail [])    ;=> []
(head [])    ;=> error (empty list has no head)

;; nth allows random access:
(nth list1 2) ;=> 'b
(nth list2 1) ;=> 2

;; length gives the length of a list
(length []) ;=> 0
(length list1) ;=> 3
(length list2) ;=> 6

;; cons prepends elements
(cons 2 []) ;=> [2]
(cons nil list1) ;=> [nil ["str" 2] 'a 'b]

;; concat concatenates two or more lists
(concat [1 2 3] [4 5 6]) ;=> [1 2 3 4 5 6]
(concat [37] ['foo] ["bar"]) ;=> [37 'foo "bar"]
(concat list2 list1) ;=> [0 2 4 6 8 10 ["str" 2] 'a 'b]

;; reverse reverse the direction of a list
(reverse list2) => [10 8 6 4 2 0]
#+END_SRC


*** Tables

Tables are key-value stores. Any type of object may be used as a key or a value,
(note, however, that it takes longer to hash more complicated data structures
since we have to descend on their fields)[fn:key-equality].

Tables are built using braces ~{}~ or the equivalent ~Table~ function. This must be
passed an even number of arguments.

#+BEGIN_SRC fn
{} ;=> empty table
{'key1 4 'key 6} ;=> table with two kv-pairs
(Table 'key1 4 'key 6) ;=> table with two kv-pairs
#+END_SRC

Table elements may be accessed using the builtin function ~get~. When the key is a
constant symbol, dot syntax (or the equivalent ~dot~ special operator) can be
used instead. This is how this looks:

#+BEGIN_SRC fn
(def tab1 {'name "Mr. Table"
          'occupation "Holds data"
          'child {'name "Table Jr." 
                  'occupation "Holds less data"}})
(def tab2 {0 'zero 1 'one 2 'two 3 'three 4 'four})

;; these all return "Mr. Table"
(get tab1 'name)
tab1.name
(dot tab1 name) ; equivalent syntax to the dot expression
;; Note that the symbols in the dot expressions are unquoted. Arguments to dot 
;; must be unquoted symbols or a compilation error occurs.

;; get is more flexible than dot and allows arbitrary key and value expressions
(get tab2 (+ 1 2)) ;=> 'three
(get {'k 'v} 'k) ;=> 'v

;; dot makes it convenient to descend on tables with symbolic key names
tab1.child.name ;=> "Table Jr."
;; equivalent expression:
(dot tab1 child name)
#+END_SRC

Since tables are mutable, the main way to populate them is to use the ~set!~
operator (the same one as for local variables). In this case, the first argument
may be any legal ~get~ or ~dot~ expression on a table.

# TODO: write code examples here
#+BEGIN_SRC fn
#+END_SRC

Lastly, tables size can be checked with ~length~, a list of keys can be retrieved
with ~table-keys~, and two or more tables can be combined with ~concat~ (if any of
the tables have keys in common, the last table in the argument list takes
priority).

[fn:key-equality] Two keys are equal if ~(= k1 k2)~ is true (using the builtin
equality function). For simple data types the meaning of equality is obvious.
Lists and tables are compared componentwise. That is, two lists are equal if and
only if all their respective entries are equal. Two tables are equal if their
key sets are equal (disregarding order), and for each key the corresponding
values in each table are equal.


*** Quoting

"Quoting" refers to the process of converting Fn source code into native Fn
data. This allows us to easily process and manipulate Fn source code using the
same facilities as for normal data.

Quoting is the secret sauce that makes Fn's macro system work. It's the main
reason why Fn has the syntax it has.

The ~quote~ special operator has syntax:
#+BEGIN_SRC fn
(quote <expr>) ;; or, equivalently
'<expr>
#+END_SRC
where ~<expr>~ can be any expression (in fact, it need not be a legal expression
by itself). These two notations are exactly the same. The interpreter expands
the second into the first before evaluation.

The value returned by quote is guaranteed to only consist of lists, symbols,
numbers, and strings. We refer to the latter three as *atoms*. Here are some
examples:
#+BEGIN_SRC fn
'(a b c) ;; returns ['a 'b 'c]
'"string" ;; returns "string"
'(+ a (/ x 2)) ;; returns ['+ 'a ['/ 'x 2]]

''quot ;; is equivalent to
(quote (quote quot)) ;; which returns ['quote 'quot]
#+END_SRC

Note that ~<expr>~ only needs to be syntactically valid (i.e. not freak out the
parser). Illegal expressions can be quoted just fine:
#+BEGIN_SRC fn
'() ;; returns [] (the empty list)
'(2 (3 4)) ;; returns [2 [3 4]]
'(quote) ;; returns ['quote]
#+END_SRC

This makes ~quote~ very handy for creating nested lists of atoms. (~quote~ also has
a big sister named ~quasiquote~, which is covered in the section on macros, and
allows for much more flexibility).

~quote~ is also the primary way to create symbols. As noted in subsection [[Simple
Data Types]], this can lead to problems when we want a symbol whose name is a
syntactically valid number. Adding an escape character to the symbol name
designates to the parser that the token should be read as a symbol rather than a
number. In fact, we can even use this trick to give variables numbers for names:
#+BEGIN_SRC fn
;; probably don't do this
(def \2 3)
2  ;; returns 2
\2 ;; returns 3
#+END_SRC

My recommendation: just don't use symbol names that are syntactically legal
numbers.


** TODO Control Flow and Functions

*** Conditional Execution

The conditional control flow primitives are ~if~ and ~cond~.

~if~ takes exactly three arguments: a test expression, an expression to evaluate
if the test is true, and an expression to evaluate if the test is false. In Fn,
~nil~ and ~false~ are considered to be false values, while all others are treated as
~true~.
#+BEGIN_SRC fn
;; if and cond syntax

;; cond takes pairs of expressions and consequences
(cond
  false 1
  nil   2
  'foo  3
  true  4)
; => returns 3, because 'foo is the first true value

(defn fizzbuzz (x)
  (cond
    (= (mod x 15) 0) 'FizzBuzz
    (= (mod x 5) 0)  'Buzz
    (= (mod x 3) 0)  'Fizz
    true             x))
(fizzbuzz 6)  ; = Fizz
(fizzbuzz 7)  ; = 7
(fizzbuzz 45) ; = FizzBuzz
(fizzbuzz 65) ; = Buzz
#+END_SRC

~cond~ is an alternative conditional syntax which is analogous to "if/else if"
blocks in other programming languages. ~cond~ takes pairs of arguments and treats
the first one as a test. If the test is true, it returns the result of the
second argument in the pair. Otherwise it proceeds to the next pair, returning
~nil~ if the end is reached.


*** TODO Creating Functions

Functions are created using ~fn~.

A short syntax is also provided for creating functions via the dollar sign,
which expands into a ~dollar-fn~ special form.

For example:
#+BEGIN_SRC fn
(fn (x) (* x x))
$(* $ $)
(dollar-fn (* $ $))
#+END_SRC

All three of the above take in a single argument and square it. Note that
dollar-fn uses ~$~ (or equivalently, ~$0~) for the name of the first parameter.
(Other positional parameters can be accessed with ~$1~, ~$2~, and so on). See
subsection [[dollar-fn]] for more details.

~fn~ on the other hand has an explicit parameter list. The syntax for parameter
lists is this:
#+BEGIN_SRC
param-list      ::=  '(' <req-param>* <opt-param>* <var-params>? ')'
req-param       ::= <identifier>
opt-param       ::= (<identifier> <init-form>)
var-params      ::= <var-list-param> <var-table-param>?
                  | <var-table-param> <var-list-param>?
var-list-param  ::= '&' <identifier>
var-table-param ::= ':&' <identifier>
#+END_SRC

In other words, parameter lists consist of zero or more required parameters,
zero or more optional parameters, and optionally end with variadic table and
list arguments.

Each of these parameters has an associated identifier (i.e. a symbol that is a
legal name). In the function's body, the respective arguments are bound to these
names. See subsection [[Functions and Calls]] for information about how argument lists
are processed during function calls.



*** TODO Functions and Calls

Function calls have already been shown frequently in the manual prior to this
point. For example, we've seen arithmetic with the functions ~+~, ~-~, ~*~, and ~/~:
#+BEGIN_SRC fn
(+ 1 2 3)      ; => 6
(- (/ 6 2) 3)  ; => 0
(* 17 (- 2 7)) ; => -85
#+END_SRC

As you may have already surmised, in each parenthesized list above, the first
element is the function and the remaining ones are its arguments. All
parenthesized forms in Fn are either special forms, macros, or function calls,
with function calls being the "default" and by far the most common.

Functions are created with the ~fn~ special form, which requires a parameter list
followed by a series of expressions that make up the function's body.

#+BEGIN_SRC fn
; square a number
(def square
  (fn (x)
    (* x x))

(square 2) ; => 4

; compute sqrt(x^2 + y^2)
(def 2-norm 
  (fn (x y)
    (sqrt (+ (square x) (square y)))))

(2-norm 3 4)  ; => 5
(2-norm 5 12) ; => 13
#+END_SRC

The syntax ~(defn ...)~ is nothing more than a shorten way to say ~(def .. (fn
...))~.

Functions can accept varying numbers of arguments. For this Fn offers *optional
parameters* and *variadic parameters*. Optional parameters have default values that
they assume when not passed explicitly. Variadic parameters, on the other hand,
allow a function to be called with more arguments than it has parameters. The
trailing arguments are passed to the function as a list. These are illustrated
below:

#+BEGIN_SRC fn
; compute the p-norm of (x,y), which is |x^p + y^p|^(1/p). 
; default is p = 2
(defn p-norm (x y (p 2))
  (let xp (** x p)
       yp (** y p))
  (** (abs (+ xp yp)) (/ 1 p)))

; p-norm accepts either 2 or 3 arguments
(p-norm 3 4)    ; => 5
(p-norm 3 4 2)  ; => 5 (same as default)
(p-norm 3 4 1)  ; => 7 (now p = 1)

; compute x1^2 + x2^2 + ...
(defn sum-squared (& args)
  ; see below for explanation of this line
  (apply + (map square args)))

; accepts any number of arguments
(sum-squared)       ; => 0
(sum-squared 1)     ; => 1
(sum-squared 1 2)   ; => 5
(sum-squared 1 2 4) ; => 21
#+END_SRC

Explanation of the function ~sum-squared~ above: ~map~ applies a function to every
element of the list, in this case squaring each of the arguments. ~apply~,
explained in [[~apply~]], passes the elements of a list to a function as positional
arguments, in this case summing all the elements of the list.

As you can see, optional parameters, (of which there may be zero or more), are
designated by putting them in parenthesized lists with a default value. Variadic
parameters, (of which their may be zero or one), are designated by the special
symbol ~&~. No additional parameters can follow variadic parameters.

Variadic and optional parameters can be mixed, in which case the variadic
parameter picks up where the optional parameters leave off.


*** TODO ~apply~

*** Variable Capture

Functions can refer to local variables. Sometimes, a function object might
outlive the scope of the local variable it references. For these cases, Fn
implements *variable capture*.

When the variable's normal lifetime ends, a copy of it is made and saved so that
the function can continue to use that variable during future calls. If multiple
functions refer to the same variable, then they share a reference to it. This
behavior is exhibited below:

#+BEGIN_SRC fn
; simple variable capture example
(with (x 7)
  ; global function get-x captures x
  (def get-x ()
    x))

; x is still accessible even though it's out of scope
(get-x) ; => 7


; variable capture between multiple functions
(with (y 0)
  (def get-y ()
    y)
  (def set-y (v)
    (set! y v)))

; reference to y is shared between get-y and set-y
(get-y) ; => 0
(set-y 17)
(get-y) ; => 17
; i.e. get-y sees the changes made by set-y
#+END_SRC

Variable capture in Fn can be used to implement something analogous to private
members in object-oriented programming languages. This is by letting functions
in a table capture a variable. When the table exits scopes, these functions will
be the only means to access the variable. Here's an example of a counter that
guards access to its value:

#+BEGIN_SRC fn
(defn Counter ()
  "Construct a counter which is initialized to 0."
  ; count is our "private member"
  (let count 0)
  (let self
    ; the functions in this table control access to count
    {'get
     (fn () count)
     'inc
     (fn ()
       (set! count (+ count 1)))
     'reset
     (fn ()
       (set! count 0))})
  self)

; create a counter
(def my-counter (Counter))
(my-counter.get) ; => 0
(my-counter.inc)
(my-counter.inc)
(my-counter.inc)
(my-counter.get) ; => 3
(my-counter.reset)
(my-counter.get) ; => 0
#+END_SRC

As shown above, variable capture allows mutable state to be attached to a
function or group of functions. This can be very powerful. However, as prolific
mutation often leads to bad, buggy programs, this functionality should be used
sparingly, and only after weighing alternative solutions.


*** TODO dollar-fn


** Namespaces and Import

A *namespace* is a collection of global variable and macro definitions. All Fn
code runs inside of some namespace.

Namespaces are identified by a *name*, which is a string not containing any
slashes, and a *package*, which is a string representing a logical collection of
namespaces. They can be combined into the symbol ~<package>/<name>~, which is
called the *identifier* or *ID* of the namespace. This ID is required to be globally
unique.

*Examples of Namespace IDs:*
#+BEGIN_SRC fn
fn/builtin              ; package is "fn", name is "builtin"
fn/internal/io          ; package is "fn/internal", name is "io"
my-project/util/linalg  ; package is "my-project/util", name is "linalg"
my-project/model        ; package is "my-project", name is "model"
#+END_SRC

When evaluating code from a file, the namespace name will always be the stem of
the file. The package can be set via a package declaration, see [[Package
Declarations]].

The default REPL namespace is ~fn/interactive~. Fn source code passed in as a
command line argument is also evaluated in this namespace.


*** Import

The ~import~ special form allows definitions from an external namespace to be
copied into the current one. The syntax for import looks like this:

#+BEGIN_SRC fn
(import <namespace-id>)                  ; invocation 1
(import <namespace-id> :as <alias>)      ; invocation 2
(import <namespace-id> :no-prefix true)  ; invocation 3
#+END_SRC

Say we have a namespace ~foo/bar/baz~ containing variables named ~bob~ and
~alice~:
#+BEGIN_SRC fn
;;; baz.fn
(package foo/bar)
(def alice "Alice")
(def bob "Bob")
#+END_SRC

We have three ways to import this namespace, shown above. All three cause the
definitions from ~foo/bar/baz~ to be copied into the current namespace. However,
in each case the created bindings will have different names. The three cases are
illustrated below:

#+BEGIN_SRC fn
;;; main.fn

;; invocation 1
(import foo/bar/baz)
; variables look like this:
baz:alice
baz:bob

;; invocation 2
(import foo/bar/baz :as b)
; variables look like this:
b:alice
b:bob

;; invocation 3
(import foo/bar/baz :no-prefix true)
; variables are imported directly (no colons)
alice
bob
#+END_SRC


*** Package Declarations

The first expression of a file (not counting comments) may be a *package
declaration*. These have the form ~(package <package-name>)~, where <package-name>
is a symbol. This simply sets the package name for the file when it is
interpreted. If no package declaration is present, the package ~fn/user~ is used.

When a file is imported, a warning is generated if its package declaration
disagrees with the package of the import. The import will still work, but some
code may break.


*** Global Identifiers for Definitions

When a new definition is made in any namespace, it is given a global identifier
of the form ~#/<namespace-id>:<symbol>~ (since namespace IDs are unique, this is
unique among all global definitions). Global IDs may be used as variable names
to reference the definition without explicitly importing it. For example,
~#/fn/builtin:map~ refers to the function ~map~ in the ~fn/builtin~ namespace.


*** Locating Namespace Sources

*Note:* This section is a precise, technical description of how namespace search
works. In reality, you don't have to think so hard about namespace import. It
works the way you'd want it to. For instance, I do ~(import pkg/bar/baz)~ from ~pkg/foo~, it
searches for a file ~bar/baz.fn~ in the directory of ~foo.fn~.

The first time a namespace is imported, we must find and load its source file.
Subsequent imports will reuse the created namespace.

When a file is run, its package is set as the *root package* and the file's
directory is set as the *working directory*. When a new import is encountered, the
following locations are searched:
- If the imported namespace is in the root package, then we search for the file
  ~name.fn~ in the working directory.
- If the imported package is in a subspace of the root package, say
  ~root/subpackage/name~, then we look for the file ~subpackage/name.fn~ in the
  working directory.
- If the environment variable FN_SEARCH_PATH is set to a colon-delimited
  sequence of directories, then we search each directory in the order provided.
  The file we look for is ~package/fn~, where slashes in the package are converted
  into subdirectories in the search.
- Finally, the system namespace directory ~${PREFIX}/ns~ is searched. ~${PREFIX}~ is
  usually ~/usr/local/lib/fn/~.

Example: We have the following files:
- project/main.fn
- project/engine.fn
- project/util/http.fn
- project/util/math.fn

Suppose main.fn has the following package declaration:
#+BEGIN_SRC fn
(package devco/product)
#+END_SRC

If we run the file main.fn, we can import all the other files like this:
#+BEGIN_SRC fn
(import devco/product/engine)
(import devco/product/util/http)
(import devco/product/util/math)
#+END_SRC

Furthermore, these names are preserved in nested imports. For instance, in
http.fn we can import engine.fn and math.fn like this:
#+BEGIN_SRC fn
(import devco/product/engine)
(import devco/product/util/math)
#+END_SRC


** TODO Macros


*** Macro Basics


*** Quasiquotation


*** Variable Capture and ~gensym~


* Command Line Interface

All functionality is accessed via the ~fn~ command line program.

** Invocation and Namespace Determination

The fn command line tool has the following interface:
#+begin_src
fn [options] [file | --eval string | - ] ARGS
#+end_src

When invoked without any arguments, a repl is started in namespace ~fn/user~.

The main options are:
- ~-r~ :: Start a REPL after evaluating all sources.
- ~--ns <namespace>~ :: Use the specified namespace for evaluation. This also sets
  the namespace for the REPL (which otherwise defaults to ~fn/user~).
- ~--no-rel-imports~ :: Prevents ~import~ from searching for paths relative to the
  filename. See subsection [[Import Search]] for details.
- ~-h~ :: Show help and exit.
There are also two more options that are unlikely to be useful for a typical
user:
- ~-d~ :: Print disassembled bytecode after compiling each expression.
- ~-l~ :: Print LLIR (low-level intermediate representation) before compiling each
  expression.

When an ~--ns~ option is used with a file, that file's namespace name is
overridden by the specified namespace. The file then just acts as a series of
expressions to evaluate. This also prevents import from searching relative to
the file path.

In the absence of an ~--ns~ option, the namespace of a file is determined by the
filename and contents. In particular, the filename stem is used as the short
name. If the file specifies a package, then that package is used, otherwise the
default package ~fn/user~ is used, e.g. a file ~foo.fn~ with no package declaration
would be evaluated in the namespace ~fn/user/foo~.


** Import Search

When the interpreter encounters an import form, it must locate and load the
relevant source file (unless the namespace has already been created, as is the
case for the builtin namespace, or for those namespaces already imported by
another component).

The interpreter has two ways to search for imports. The first way is to use the
package and directory of a file to locate other components, while the second is
to simply use a search path. The search path approach is pretty straightforward;
it can be set using the ~FN_SEARCH_PATH~ environment variable, but by default it
will simply check the Fn library directory on the system (something like
~/usr/lib/Fn/ns~) before giving up.

The first search method mentioned is called relative import search. This is how
it works:
- The interpreter has a notion of a /working directory/. When evaluating a file,
  this is set to the directory containing the file. Otherwise it is the
  directory from which the interpreter was launched.
- The interpreter associates the package of the code being evaluated to the
  working directory. This package is saved by the interpreter as the /root
  package/.
- When an import is performed on any subpackage of the root package (including
  the root package itself), the interpreter will search for import files
  relative to the working directory based on the import name. (It will fall
  back to the search path if this fails).

The specifics of the search algorithm are best explained by example. Suppose I
evaluate a file ~bar.fn~ with package ~baz/foo~. The namespace for the file is
~baz/foo/bar~ and the working directory is the directory of ~bar.fn~, which we'll
write as ~${BAR_DIR}~.

Let's see how imports work in this scenario:
- ~(import baz/foo/oof)~ will cause the interpreter to look for a file
  ~${BAR_DIR}/oof.fn~. This is because the directory ~${BAR_DIR}~ is associated to
  the package ~baz/foo~.
- Similarly, ~(import baz/foo/boom/grop)~ looks for the file
  ~${BAR_DIR}/boom/grop.fn~.
- However, ~(import baz/dop)~ will *not* look for a file named ~${BAR_DIR}/../dop.fn~,
  because ~baz~ is not a subpackage of ~baz/foo~.

Lastly, we make one important notes about imports. Even if a file is located, it
will not be used if it has a package declaration which doesn't match up with the
requested one. In the above example, if we find ~${BAR_DIR}/oof.fn~, but it has a
package declaration placing it somewhere other than ~baz/foo~, then the import
will fail (and we'll end up using the search path).


** REPL

Fn's REPL allows interactive evaluation of code. It supports multi-line
expressions. Optional GNU readline support is planned, but for now, it is highly
recommended that you run the REPL in a wrapper that has command history, such as
rlwrap or Emacs shell-mode.

Additional functionality can be accessed by typing keywords (i.e. symbols whose
names begin with ":"). The available REPL keywords are:

- ~:help~ :: List these options.
- ~:quit~ :: Quit the interpreter. Can also be done by sending EOF with ctrl-d.
- ~:load <filename>~ :: Evaluate a file in the current namespace.
- ~:reimport <namespace>~ :: Redo a namespace import as if it was for the first
  time. Be warned that this will not overwrite the old functions if they've
  already been compiled into a new one.
- ~:ns <namespace>~ :: Switch to the given namespace.

To be interpreted as REPL commands, these cannot be preceded by any whitespace.

At the time of writing, these are not actually implemented in the codebase, but
you can try your luck because there's a chance that this document is out of sync
with my progress.


* Builtin Functions

** ~fn/builtin~

These functions are automatically imported into every namespace upon creation.
They are not all implemented at the time of writing, but a surprising number
are.

*Equality Comparisons*
- ~= (& args)~
  - Returns true if all args are semantically equal
- ~same? (& args)~
  - Behaves the same as ~=~ for numbers, symbols, bools, and the empty
    list. For other types, only returns true if all the arguments correspond to
    the same garbage collector object.


*Type queries:*
- ~number?~, ~string?~, ~list?~, ~table?~, ~function?~, ~symbol?~, ~bool?~
  - These accept a single argument and return true if it has the corresponding
    type, false otherwise.


*Functions on Symbols*
- ~gensym ()~
  - create a nameless symbol which is guaranteed to be unique
- ~intern (string)~
  - create a symbol from a string
- ~symname (symbol)~
  - get a symbol's name as a string

*Functions on Numbers*
- ~+~, ~-~, ~*~, ~/~, ~**~
  - Arithmetic operators. These accept arbitrarily many arguments.
  - ~**~ is exponentiation.
  - Calling with no arguments yields the identity element for the operation.
  - Calling with one argument yields the argument itself for ~+~, ~*~, and ~**~, the
    multiplicative inverse for ~/~, and the additive inverse for ~-~.
  - Underlying operations are performed on IEEE 64-bit floats (with truncated
    significand).
- ~abs~, ~exp~, ~log~
  - Functions of exactly one argument that perform their respective mathematical
    operations.
  - ~log~ is natural log
- ~mod (quantity modulus)~
  - Computes ~quantity~ modulo ~modulus~. The second argument must be an
    integer.
- ~integer?~
  - One argument of any type. True if it's an integer, false otherwise.
- ~floor, ceil~
- ~frac-part~
- ~<~, ~>~, ~<=~, ~>=~
  - The usual quantity comparisons. Accept arbitrarily many args. Always return
    true if 1 or 0 args are passed.

*Functions on Strings*
- ~String (& args)~
  - convert each argument to a string and concatenate them
- ~substring (str start (len -1))~
  - get a substring. Negative length values represent distances from the end of
    the string, with -1 indicating that the substring should go to the end.

*Functions on Lists*
- ~List~
  - Creates a list from its arguments.
- ~cons (hd tl)~
  - prepend ~hd~ to a list ~tl~
- ~head, tail~
  - One argument. Get the head or tail of a list, respectively.
- ~nth (n list)~
  - Get the nth element of a list, indexed from 0.
- ~take,~ ~drop,~ ~split~ ~(n list)~
  - ~take~ takes the first n elements of a list. ~drop~ drops the first n elements
    of a list. ~split~ does both at once and returns a list ~[front back]~, where
    front and back are the two pieces of the list.
- ~take-while, drop-while, split-after (pred list)~
  - ~pred~ is a function of one argument used as a predicate
  - Analogous to take, drop, and split, but instead of splitting after ~n~
    elements, they split on the first element for which ~pred~ fails.

*Functions on Tables*
- ~Table~
  - Accepts an even number of arguments. Treats them as alternating key/value
    pairs and constructs a table.
- ~get (table key)~
  - Get a value from a table. A runtime exception is generated if the table has
    no such key.
- ~get-default (table key (default nil))~
  - Get a value from a table, return default if it's not found.
- ~has-key? (table key)~
  - True or false depending on if key is a key for table.
- ~get-keys~
  - Returns a list of keys to a table. No promises about the order.


*Functions on Collections* 
Strings aren't really collections, but some of these work on them too.
- ~length~
  - Returns length for strings and lists, number of keys for tables.
- ~concat (& args)~
  - Concatenate arguments in the order provided
  - All arguments must have the same type
  - When concatenating tables which have keys in common, the last table in the
    argument list takes precedence.
- ~contains? (coll x)~
  - True if ~(= x y)~ for some ~y~ in the collection, false otherwise.
  - Doesn't work on strings
- ~reverse~
  - This one doesn't work on tables.
- ~empty?~
  - Works on strings, lists, and tables.

*Functions on Bools*
- ~or~, ~and~ (wrappers for the builtins)
- ~not~
- ~nand~
- ~nor~
- ~xor~
- ~xnor~

*Transformations*
- ~apply (fun arg0 arg1 & args)~
  - The last two arguments must be a list and a table, respectively. Calls the
    provided function in the following way: all arguments before the last two
    are passed as positional arguments. The list is expanded and its elements
    are passed as positional arguments. The table is used for keyword arguments.
    Its keys should be symbols (but not keywords).
  - This wraps a builtin operator
- ~partial (fun & args)~
  - partially apply a function
- ~comp (fun & funs)~
  - compose the provided functions
- ~map (fun & colls)~
  - we all know ~map~
  - as a bonus, it also works on tables
- ~maprev (fun & colls)~
  - like map, but only for lists and the resulting list is reversed
  - this is faster than map
- ~foldl (fun init coll)~
  - perform a left fold
  - ~fun~ accepts arguments ~(accumulator input)~
- ~foldr (fun init coll)~
  - perform a right fold
  - ~fun~ accepts arguments ~(input accumulator)~
- ~filter (fun coll)~
  - works on lists and tables

*Macros*
- ~->~, ~->>~ 
  - Threading macros. These work like they do in Clojure. No time now to type a
    description here.

*Error Generation*
- ~error (message)~
  - Stops execution and emits the provided error message.


* FFI

Fn will provide an FFI that works in the following way:
- Create C source file that includes the ~fnffi.h~ header, which provides functions
  for manipulating Fn values.
  - The functions intended to be called from Fn must have a particular type
    signature.
- Compile the file into a shared library.
- Back in Fn, use the namespace ~fn/ffi~ to import functions by name from the
  shared library.
