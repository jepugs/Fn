(namespace fn/builtin)

(defn nth (n list)
  (if (<= n 0)
      (head list)
      (nth (- n 1) (tail list))))

(defn any (test? list)
  (letfn iter (rem)
    (if (empty? rem)
        no
        (if (test? (head rem))
            yes
            (iter (tail rem)))))
  (iter list))

(defn map-reverse (f & lists)
  (letfn iter (acc tails)
    (if (any empty? tails)
        acc
        (do
          (let v
               (apply f
                      (reverse (foldl (fn (x y) (cons (head y) x))
                                      []
                                      tails))))
          (iter (cons v acc)
                (reverse (foldl (fn (x y) (cons (tail y) x))
                                []
                                tails))))))
  (iter [] lists))

(defn map (f & lists)
  (reverse (apply map-reverse f lists)))
