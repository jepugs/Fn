(package t)

(defn foldl (fun init list)
  (letfn iter (acc rem)
    (if (empty? rem)
        acc
        (iter (fun acc (head rem))
              (tail rem))))
  (iter init list))

(defn mapping (fun)
  (fn (step)
    (fn [acc in] (step acc (fun in)))))

(defn filtering (pred)
  (fn (step)
    (fn [acc in]
      (if (pred in)
          (step acc in)
          acc))))

(defn transduce (xf lst)
  ((nth 1 xf) (foldl (nth 0 xf) (nth 2 xf))))


