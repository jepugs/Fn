* Syntax

There are essentially two parts involved in formally specifying fn's syntax. First, we must define
the abstract notion of a *syntactic form*. Syntactic forms are formal objects living one level of
abstraction above the text in source code. Essentially, a syntactic forms are equivalence classes on
fn expressions. If two expressions correspond to equivalent syntactic forms, then they will be
evaluated in the same way.

Notably, every syntactic form can be written in a *canonical form* consisting only of atoms and
parentheses. Syntax outside of this canonical form is called *pointy syntax*. We define the semantics
of pointy syntax by first specifying an *expansion*, which is a procedure to go from pointy syntax to
something in canonical form. See "Canonical Form and Pointy Syntax" for all of these expansions.

The second part involves specifying how text input sources correspond to syntactic forms. This is
done largely informally and in parallel to the first part. By and large, the way that we textually
represent syntactic forms will be the same way you would type them into a source file, so the
distinction is not as important as it seems.

We decline to go into much detail about the syntax of atoms. The reason for that is that fn's atoms
are by and large what you'd expect; things that look like numbers are numbers, things that look like
strings are strings, and things that look like variable names are symbols.

** Source Text Encoding

fn version 0 only supports ASCII text for fn source code. Future versions will have full UTF-8
support.

** Syntactic Forms

An *atom* is the smallest syntactic unit in fn. There are three kinds of atoms: numbers, strings, and
symbols. Numbers denote floating point numbers, and have forms such as ~42~, ~-16.0~, ~0xff02~, or ~1.2e6~.
Strings are string literals, and are delimited by quotation marks with the backslash as an escape
character, for example ~"hello, world!"~ or ~"two\n  lines"~.

A symbol is any sequence of *symbol constituent characters* which is not a valid number. The symbol
constituent characters are all non-whitespace characters other than these characters, called the
*syntax characters*:
#+BEGIN_SRC
`$(){}[]\;'",.
#+END_SRC 
Syntax characters and whitespace may be include as part of a symbol by escaping them with a backslash.

A *syntactic form* in fn is defined to be either an *atom* or a *(syntactic) list* consisting of a
(finite) sequence of syntactic forms called *subexpressions*. We usually denote lists by writing their
atoms in order between parenthese. For example, ~(1 2 3)~, ~(println "hello world")~, and ~(def x (+ x
2))~ are all lists.

The first element of a syntactic list is called the *operator*, while the rest are called the *operands*
or *arguments*.

** Equivalence of Syntactic Forms

Two atoms are considered equivalent if they represent the same value. For instance ~+2.0~ and ~2~ are
equivalent. Two syntactic lists are considered equivalent if they have the same number of
subexpressions and those subexpressions are respectively equivalent. Thus equivalence between
syntactic forms is indifferent to whitespace and comments.

Non-canonical syntactic forms are considered equivalent if they have equivalent canonical forms, see
below.

** Comments

Comments in fn begin with a semicolon ~;~ and end with a newline. They are semantically equivalent to
whitespace.

** Canonical Form and Pointy Syntax

Syntactic forms written using only parentheses and symbol constituents (including escaped syntax
characters) are said to be in *canonical form*. Every syntactic form has a unique canonical form.

Forms containing characters other than parentheses and symbol constituents are said to have *pointy
syntax* (in reference to the fact that parentheses are smooth and round). In this vein, we define the
*pointy syntax characters* as these:
#+BEGIN_SRC
`${}[];',.
#+END_SRC

Each pointy syntax character has an associated expansion into canonical form.

The backtick, comma, and dollar sign are reserved for use in future versions of fn. An error is
generated if they appear unescaped in fn source code.

The semicolon denotes a comment, see above. On expansion, comments are treated identically to
whitespace and simply stripped away.

Braces function like parentheses, but they expand to insert the symbol ~Object~ into the operator
position of the list. Square brackets are similar, inserting the symbol ~List~.

The single quote must be followed by a symbol. It expands to a list of two elements, the literal symbol
~quote~ and then the following symbol.

The following expressions are arranged in pairs showing first the pointy syntax and then the
equivalent canonical, parenthesized syntax:

#+BEGIN_SRC fn
'symbol
(quote symbol)

a.b
(dot a b)
a.b.c
(dot a b c)
a.d.b.d
(dot a b c d)
;; and so on...

[]
(List)
[arg1 arg2]
(List arg1 arg2)

{}
(List)
{key val}
(Object key val)
#+END_SRC

** Expressions

*Expressions* refer to the subset of forms upon which evaluation semantics are defined. Essentially,
they are the forms corresponding to syntactically valid expressions.

For example, the empty list, ~()~, is a form, but not an expression. It can legally occur in some
contexts, such as as the empty argument list in ~(fn () null)~, but on its own it will cause an error.
By constrast, ~(do (println "hello, world!"))~ is both a form and an expression. ~(if)~ is a form but
not an expression, as it is malformed (missing operands) and so will result in a syntax error.
Finally, ~{]~ and ~a..b~ are neither forms nor expressions, since the former has mismatched delimiters
and the latter has repeated dots, both of which are syntax errors.

Semantically, the term "expression" is preferred over "form" only when the expression, in addition
to being syntactically valid, is expected to be evaluated as such. For instance, ~dot~ forms are often
referred to as forms rather than expressions, even when they are expected to be syntactically valid.


* Data Model

Every value in fn is of exactly one of the following types:

- bool :: special constants true and false
- null :: special constant indicating the absence of a value
- symbol :: an internalized string (usually created using quote)
- number :: 61-bit floating-point number
- string :: string of bytes
- list :: singley-linked immutable list
- object :: generalized key-value store accepting any fn values for the keys/values
- function :: function which may be called

In the future, other native data structures may be added, including bitvectors, constant-time
arrays, and lazy sequences. Generally, user data structures are meant to be implemented using
objects.


* Evaluation

For the purposes of evaluation, it is helpful to categorize all fn expressions into four groups:
variable references, literals, special forms, and function calls. Variable references are denoted by
symbols, literals are denoted by numbers and strings, and special forms and function calls are both
represented by syntactic lists. However, special forms have one of the 13 built-in special operators
in the operator position, whereas function calls do not.

We first describe the global variable and module environment of fn, then break into the four cases
outlined above to fully specify the evaluation semantics of fn.

** Modules

All global variables in fn are stored in objects called modules. Modules are just normal fn objects
with symbols as keys, however they include a special property called ~_modinfo~ containing information
about the module. ~_modinfo~ is considered an implementation-internal data structure, so it should be
treated as being opaque to user code, even though it's really not.

Modules have IDs which are either symbols (e.g. ~module~) or dot forms (e.g. ~pkg.mod~ or equivalently,
~(dot pkg mod)~). If they are dot forms, then the last operand is called the name and the operands
before that are called packages. All imported objects can be accessed via a special global variable
called ~ns~. Imported packages and modules correspond to objects contained in ~ns~, so for instance an
imported module with ID ~pkg.mod~ can be accessed from any module as ~ns.pkg.mod~.

When a new module is created, the ~_modinfo~ and ~ns~ global variables are set up automatically. In
addition, all definitions from the special built-in module ~fn.core~ are copied into the new module.

Generally, one module corresponds to one file, with the module ID being set by the import special
form.

The default module is ~fn.user~. When the interpreter is started, the files provided to it as input
are evaluated using this as the module. If you want your code to execute under a specific module ID,
you must place it in the search path correctly and bind it using ~import~.

** Variable Environments and Resolution

Every evaluation in fn happens in the context of some sort of *variable environment*, which consists
of the current module as well as a table of local variables. Variable environments have the usual
lexical scoping rules: when two variables in nested lexical environments have the same name,
references to that variable resolve to the one at the deepest lexical scope. Variables may be
introduce partway through a lexical environment, in which case their definitions are accessible
lexically after their definition.

For the purposes of name resolution, the current module is considered the outermost lexical
environment. If a variable name is not found even there, a runtime error is generated.

fn has no concept of a constant variable. Everything is mutable. Be responsible.

** Function Call Syntax

Any list which is neither empty nor a special form is evaluated as a function call. The operator
expression is evaluated and treated as a function (an error will be raised if it is not one), while
the operand expressions are evaluated in order and passed to the function as local variables.

Function calls in fn version 0 are limited to a maximum of 255 arguments, even when ~apply~ is used.

When a function is called, its body is evaluated in a new variable environment extended from the
environment in which the function was originally created. The arguments to the function are bound as
local variables to the names in its parameter list.

When local variables from an enclosing scope appear in the body of a function, they are said to be
*captured* by the function. Captured variables have proper closure semantics insofar as they can
outlive the lexical scope in which they are defined and they are also properly shared when multiple
function objects refer to the same variable.

** Special Forms

There are 13 special operators in fn, each identified by a symbol. When such a symbol occurs in the
operator position of a syntactic list, the evaluation semantics of the special operator take over.
This is the mechanism by which all core language features are provided.

What follows is a detailed description of all 13 special operators. The following conventions are
observed:
- in the code samples, symbols beginning and ending with underscores, e.g. ~_expression_~, represent
  places where a variety of different forms could go. They are referred to in the accompanying text
  via italics, e.g. /expression/.
- in the code samples, ellipses mean that either the previous or previous two arguments repeat in a
  pattern. It should be clear which from the description.
- all other syntax in the code samples is meant to be literal, up to equivalence (i.e. adding or
  removing whitespace and comments).


*** Variable Manipulation Operators: ~def~, ~do~, ~let~, and ~set~

 #+BEGIN_SRC fn
 (def _name_ _value-expression_)
 #+END_SRC

 ~def~ creates a new global variable called /name/ with the value obtained by evaluating
 /value-expression/. If there already exists a global variable with
 this name, the old value is simply replaced.

 *Note:* This silent overwrite behavior will probably be replaced by an error in future versions. It
 will generate a warning at the very least.

 The binding occurs in the current module, so functions can only define global variables in the
 module in which they were defined. Moreover, creation of a global variable within a function body is
 discouraged. That is, ~def~ forms should mostly be restricted to the top level or within top-level ~do~
 expressions.


 #+BEGIN_SRC fn
 (do _expressions_ ...)
 (let _name_ _value-expression_ ...)
 #+END_SRC

 ~do~ introduces a new lexical environment in which ~let~ may be used. /Expressions/ are evaluated in the
 order in which they occur. When called with no arguments, ~do~ returns ~null~.

 ~let~ may not occur in the toplevel lexical environment, i.e. it must occur within ~do~ or ~fn~, the other
 operator capable of creating a lexical environment. ~let~ takes alternating pairs of symbols /name/ and
 expressions /value-expression/ as arguments. For each such pair, it created a new local variable named
 /name/ in the current environment with the value obtained by evaluating /value-expression/. If a local
 variable with this name already exists, it is silently overwritten. ~let~ always returns ~null~.

 *Note:* fn's ~let~ is fundamentally an inline operator and feels more similar to the ~var x = y~-style
 declarations from imperative languages than to the ~let~ of other languages derived from LISP. This is
 by design. The creator of fn finds the imperative style much cleaner both to read and to write, as
 it obviates the extra layer of parentheses introduced by ~let~ around its body, thus reducing both the
 indenation level and the amount of closing paren clutter. It also makes the language friendlier to
 folks who weren't brought up on LISP. Fight me.

 #+BEGIN_SRC fn
 (set _place_ _value-expression_)
 #+END_SRC

 ~set~ updates the variable or property indicated by /place/ to the value of /value-expression/. /place/ may
 be a symbol, in which case it is treated as a variable name, or a ~dot~ form, in which case it
 indicates the property of an object. The property set is the same one which the ~dot~ form would
 access (see the description of ~dot~).

 In the case /place/ is a symbol, if the variable does not exist, a runtime error is generated. In the
 case that /place/ is a property, the property is created when necessary.

 *Note 1:* When /place/ is a dot form, it will create new properties, but not new objects. For instance,
 the following code generates an error:
 #+BEGIN_SRC fn
 (def x {})
 (set x.y.z 2) ; error: won't create object x.y
 #+END_SRC
 Whereas the expression ~(set x.y 2)~ would have been just fine.

 *Note 2:* ~set~ is probably the most dangerous (and potentially most powerful) operator in fn, because
 it can be combined with the global namespace object ~ns~ to overwrite any variable, module, or
 package, and even built-in function. Consequently, the fn interpreter has been designed to place a
 curse upon anyone who endeavours to abuses ~set~ to mutilate built-ins in such ways.

 *Note 3:* ~set~ is another major differentiating factor between fn and other Lisps. Notice there's no
 exclamation point. That's because we're gonna be using this one a lot. While fn is a fairly
 barebones language and well-suited to functional programming, its object system really shines when
 we have the ability to construct objects in an imperative style. In the author's opinion, having
 imperative constructor functions doesn't contradict the best practices of functional programming.
 Rather, it complements the functional programming style by making it easier to write definitions of
 complex data structures. By contrast, when using a language like Haskell or Scheme, one is often
 tempted to cram a long expression in an awkward position in order to work around the more purely
 declarative syntax.


*** Lambda Operator: ~fn~

 #+BEGIN_SRC fn
 (fn (_parameters_ ...) 
   _body-expressions_ ...)
 (fn (_positional-parameters_ ... & _variadic-parameter_)
   _body-expressions_ ...)
 #+END_SRC

 ~fn~ creates an anonymous function. The first operand is the parameter list, which defines the names
 to which the function's arguments will be associated in the lexical scope of its body. The
 parameters are bound to the function's arguments in the order in which they occur.

 The special symbol ~&~ indicates a variadic parameter. It must be succeeded by exactly one symbol,
 which will be used as the name of the variadic parameter, and then the end of the parameter list.
 When a function is called which takes a variadic parameter, all arguments after the last positional
 parameter are collected in a list. That list is then used as the value for the variadic parameter.

 ~fn~ returns a function object which may be called by placing it, (or more precisely, any expression
 yielding the function object), as the operator of an expression or by using ~apply~. The function must
 be called with at least as many arguments are there are positional parameters, and exactly as many
 in the cases where there is no variadic parameter. These arguments are bound to the respective
 parameters, and the body expressions are evaluated.

 Functions remember the lexical environment in which they were defined, including the current module.
 When called, the body is evaluated in a lexical environment extending the environment of creation.
 fn's lambdas have full support for closures, which is to say that local variables are closed over
 (i.e. copied to the heap) whenever necessary, and that two ~fn~ expressions in the same lexical
 environment will share the same references to those closed-over variables. This behavior allows the
 implementation of private member variables when defining objects.

 *Note:* Future versions of fn will support optional and keyword parameters via extended syntax.

 No function may have more than 255 parameters in total, counting the variadic parameter as one. In
 addition, function calls are limited to 255 arguments, (even in cases where ~apply~ is used).


*** Namespace Operators: ~import~ and ~dot~

 - dot
 - import


*** Apply Operator: ~apply~

#+BEGIN_SRC fn
(apply _function_ _argument-list_)
(apply _function_ _arguments_ ... _argument-list_)
#+END_SRC

~apply~ calls /function/ with the elements of the list /argument-list/ as arguments. One or more
preceding positional arguments can be specified by providing more than two arguments, in which
case the last one argument is treated as the argument list.

If /function/ is not a function or /argument-list/ not a list, a runtime exception is generated.

Function calls in fn may not have more than 255 arguments in total, and if /argument-list/ is long
enough that this limit would be exceeded, a runtime error is generated. So be sensible about it.

*Note:* It's often sensible to use a variadic parameter as the argument-list for ~apply~. In these
cases, you practically guarantee that the 255-argument limit won't be an issue. Anyway, it's a
pretty big number, 255.


*** Conditional Operators: ~cond~ and ~if~

 #+BEGIN_SRC fn
 (if _test-expression_ _then-expression_ _else-expression_)
 (cond _test-expression_ _clause-expression_ ...)
 #+END_SRC

 ~if~ and ~cond~ are fn's conditional operators. 

 ~if~ accepts exactly three expressions as operands. If /test-expression/ evaluates to a logically true
 value, /then-expression/ is evaluated. Otherwise, /else-expression/ is evaluated.

 ~cond~, on the other hand accepts a series of paired-up expressions /test-expression/ and
 /clause-expression/. (So it must have an even number of arguments). For each clause, in the order in
 which they occur, /test-expression/ is evaluated. If it is logically true, then /clause-expression/ is
 evaluated and its result returned, terminating the ~cond~. If the ~cond~ body is empty or if none of the
 tests evaluate to true, ~null~ is returned to indicate no value.


*** Logical Operators: ~and~ and ~or~

#+BEGIN_SRC fn
(and _expressions_ ...)
(or _expressions_ ...)
#+END_SRC

~and~ evaluates one expression at a time, halting and returning ~false~ if the expression is logically
false (~null~ or ~false~). Otherwise returns the result of the last expression. When called with no
arguments yields ~true~.

~or~ is similar, but returns on the first logically true (i.e. not logically false) argument,
returning ~false~ only if the end is reached. When called with no arguments yields ~false~.

*Note:* These operators may be changed in a future version to only return ~true~ or ~false~.

 #+BEGIN_SRC fn
 ;; examples
 (and 1 null) ; -> false
 (and 1 "two") ; -> "two"
 (and false (println "never happened")) ; -> false. (No output)
 (and true (println "happened"))        ; -> false. (Prints "happened")

 (or 1 4) ; -> 1
 (or false null) ; -> false
 (or (println "hi") false) ; -> false. (Prints "hi")
 (or true (println "bye")) ; -> false. (No output)
 #+END_SRC


*** Quoting Operator: ~quote~

#+BEGIN_SRC fn
(quote _name_)
'_name_
#+END_SRC

~quote~ is used to make symbol constants. /name/ must be a symbol, which is returned as an fn value.

*Note:* The reason for the name "quote", (and indeed the main reason for the native symbol type), is
that at some point the functionality will be extended to match that of other dialects of Lisp.

* Appendix

** Formal Syntax for Atoms and Dot Forms

This section will formally specify the way that numbers, strings, symbols, and (non-canonical) dot
forms are read.

** BNF Grammar for Syntactic Forms

This section will provide a grammar that accepts all syntactic forms.

** Value Representation

This section will describe the internal value representation used by the virtual machine.

** Virtual Machine

This section will describe the architecture of the virtual machine and include a table of opcodes.
